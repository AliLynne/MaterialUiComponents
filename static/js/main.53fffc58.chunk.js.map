{"version":3,"sources":["theme.js","components/BlogPost/BlogPost.js","components/BlogPost/index.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","BlogPost","props","react_default","a","createElement","Box","p","Container","maxWidth","Paper","AppBar","position","color","Toolbar","Typography","align","variant","title","subtitle","gutterBottom","date","src","alt","content","App","className","components_BlogPost","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAIeA,EAFDC,sEC+CCC,IC/CAA,EDaf,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,EAAG,GACNJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,SAAS,MAClBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9BV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKJ,MAAM,WAC3CX,EAAMgB,SAIbf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,EAAG,GACNJ,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYE,QAAQ,WAAWJ,MAAM,aAClCX,EAAMiB,UAEThB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYE,QAAQ,YAAYJ,MAAM,UAAUO,cAAY,GAA5D,SACSlB,EAAMmB,MAEflB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,EAAG,GACNJ,EAAAC,EAAAC,cAAA,OAAKiB,IAAI,gCAAgCC,IAAI,mCAG/CpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYE,QAAQ,QAAQG,cAAY,GACrClB,EAAMsB,cEnCfN,SAAQ,mBACRC,EAAW,qCACXE,EAAO,aACPG,EAAU,uuDAUDC,MARf,WACE,OACEtB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACsB,EAAD,CAAUT,MAAOA,EAAOC,SAAUA,EAAUE,KAAMA,EAAMG,QAASA,cCAnDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAepC,MAAOA,GACpBI,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,OAGFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53fffc58.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme();\n\nexport default theme;","import React from 'react';\n\n// *** Material UI Components *** //\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// *** Other Resources *** //\n\n// Expected usage:\n// <BlogPost title={someTitle} date={someDate} content={someContent}/>\n\nfunction BlogPost(props) {\n  return (\n    <Box p={2}>\n      <Container maxWidth=\"lg\">\n        <Paper>\n          <AppBar position=\"static\" color=\"primary\">\n            <Toolbar>\n              <Typography align=\"center\" variant=\"h6\" color=\"inherit\">\n                {props.title}\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <Box p={2}>\n            <Typography variant=\"overline\" color=\"secondary\">\n              {props.subtitle}\n            </Typography>\n            <Typography variant=\"subtitle2\" color=\"primary\" gutterBottom>\n              Date: {props.date}\n            </Typography>\n            <Box p={2}>\n              <img src=\"https://picsum.photos/300/200\" alt=\"random pic from picsum.photos\" />\n            </Box>\n            \n            <Typography variant=\"body1\" gutterBottom>\n              {props.content}\n            </Typography>\n          </Box>\n        </Paper>\n      </Container>\n    </Box>\n    \n  );\n}\n\nexport default BlogPost;","import BlogPost from './BlogPost';\n\nexport default BlogPost;","import React from 'react';\nimport BlogPost from './components/BlogPost'\nimport './App.css';\n\nconst title = \"Blog Post Title\";\nconst subtitle = \"Subtitle for the current blogpost.\"\nconst date = \"01/01/2022\";\nconst content = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum a dolorum eveniet ea eos magnam repudiandae, itaque assumenda quam unde amet maxime, perferendis libero adipisci, inventore soluta. Accusamus, ipsa nam. Lorem ipsum dolor sit amet. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias repellat necessitatibus omnis officiis nemo obcaecati quibusdam voluptas, laboriosam temporibus vero delectus, facilis enim ducimus. Deleniti cum repellat ad in beatae ipsum modi distinctio tempore. Illum tenetur libero quos aut reiciendis dicta error numquam voluptate quod temporibus dolore, quas repudiandae iure itaque deleniti. Id dolores magnam quasi corrupti eos, obcaecati iusto labore blanditiis. Ex fugit tempore sint enim quo. Perspiciatis dolor magnam, consequuntur alias quia dicta blanditiis magni mollitia, architecto et commodi consequatur quisquam harum enim at ab minima nemo quasi voluptatem nihil. Alias dolorem hic facere quas repellendus mollitia numquam veniam. Maiores libero aut deserunt sunt porro, vero blanditiis, eum numquam perspiciatis facere sed officiis odit, quae rerum ab dolor! Mollitia earum voluptate rem eos, aut esse voluptatibus saepe, magnam itaque porro optio exercitationem. Reprehenderit, quibusdam corrupti voluptas, repellendus tempora sit delectus debitis nostrum voluptatum natus molestiae perspiciatis. Earum, magni quidem illum exercitationem natus adipisci ab, officiis quod rem explicabo quis? Sint, earum. Voluptatem eius obcaecati ut iusto laboriosam soluta quas voluptatibus necessitatibus aspernatur neque? Rerum voluptatibus ratione provident! Laborum excepturi, non perspiciatis unde soluta numquam dolorum commodi quos ab iste sequi nam dolores possimus expedita maxime maiores doloremque facere?\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BlogPost title={title} subtitle={subtitle} date={date} content={content}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport theme from './theme';\nimport { ThemeProvider } from '@material-ui/styles';\nimport App from './App';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}